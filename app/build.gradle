apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.mbt-administrator'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 10
        versionName '2.1.0'
        flavorDimensions "default"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "EEG_ENABLED", "true"
            buildConfigField "boolean", "BLUETOOTH_ENABLED", "true"
            buildConfigField "boolean", "DEVICE_ENABLED", "true"
            buildConfigField "String", "FIRMWARE_VERSION", "\"1_7_4\""
        }
//        staging {
//            buildConfigField "boolean", "EEG_ENABLED", "true"
//            buildConfigField "boolean", "BLUETOOTH_ENABLED", "true"
//            buildConfigField "boolean", "DEVICE_ENABLED", "true"
//            buildConfigField "String", "FIRMWARE_VERSION", "\"1_7_4\""
//        }
        debug {
            buildConfigField "boolean", "EEG_ENABLED", "true"
            buildConfigField "boolean", "BLUETOOTH_ENABLED", "true"
            buildConfigField "boolean", "DEVICE_ENABLED", "true"
            buildConfigField "String", "FIRMWARE_VERSION", "\"1_7_4\""
        }
//        unitTests {
//            initWith (buildTypes.debug)
//            buildConfigField "boolean", "EEG_ENABLED", "false"
//            buildConfigField "boolean", "BLUETOOTH_ENABLED", "true"
//            buildConfigField "boolean", "DEVICE_ENABLED", "false"
//            buildConfigField "String", "FIRMWARE_VERSION", "\"1_7_4\""
//        }
    }

//    testBuildType "unitTests"
//
//    defaultPublishConfig "full"

//    productFlavors {
////        full{
////            buildConfigField "String", "USE_ALGO_VERSION", "\"2.3.1\""
////        }
////        lite{
////            buildConfigField "String", "USE_ALGO_VERSION", "\"2.3.1\""
////        }
//    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}


//
//configurations {
//    doclava
//}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'org.mod4j.org.apache.commons:lang:2.1.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.5'

//    doclava 'com.google.doclava:doclava:1.0.6'

    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.greenrobot:eventbus:3.1.1'

    testImplementation 'org.robolectric:robolectric:3.7.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.mockito:mockito-android:2.25.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}


//project.afterEvaluate {
//    publishing {
//        publications {
//            full(MavenPublication) {
//                groupId 'mybraintech.com'
//                artifactId 'sdk-full'
//                version android.defaultConfig.versionName
//
//                artifact(fullSourcesJar)
//                artifact(fullJavadocJar)
//
//                //android.buildTypes.all { buildType ->//Select the library name here
//                def libName = "lib_full_release_${android.defaultConfig.versionName}.aar"
//                artifact("$buildDir/outputs/aar/${libName}")
//                //}
//
//
//                //we can force send to nexus the version we want by changing the aar name
//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                    // WARNING HERE IS FOR IMPLEMENTATION ONLY. API, COMPILEONLY,... ARE NOT TAKEN INTO ACCOUNT
//                    configurations.implementation.allDependencies.each {
//                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                        }
//                    }
//                }
//            }
//
//            lite(MavenPublication) {
//                groupId 'mybraintech.com'
//                artifactId 'sdk-lite'
//                version android.defaultConfig.versionName
//
//                artifact(liteSourcesJar)
//                artifact(liteJavadocJar)
//
//                //android.buildTypes.all { buildType ->//Select the library name here
//                def libName = "lib_lite_release_${android.defaultConfig.versionName}.aar"
//                artifact("$buildDir/outputs/aar/${libName}")
//                //}
//
//                //we can force send to nexus the version we want by changing the aar name
//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                    // WARNING HERE IS FOR IMPLEMENTATION ONLY. API, COMPILEONLY,... ARE NOT TAKEN INTO ACCOUNT
//                    configurations.implementation.allDependencies.each {
//                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                        }
//                    }
//                }
//            }
//        }
//        //Add repository here with publisher credentials
//        repositories {
//            maven {
//                url ""
//                credentials {
//                    username ""
//                    password ""
//                }
//            }
//        }
//    }
//
//}

//Task to generate sources into Jar file
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
